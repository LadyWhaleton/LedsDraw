
lab6-part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010c  0080010c  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000044b  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000257  00000000  00000000  00000be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045b  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000029c  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000298  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	c0 c1       	rjmp	.+896    	; 0x3b6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 31       	cpi	r26, 0x17	; 23
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	58 d2       	rcall	.+1200   	; 0x574 <main>
  c4:	a9 c2       	rjmp	.+1362   	; 0x618 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Dot>:

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
	tasksPeriodCntDown = tasksPeriodGCD;
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	19 f0       	breq	.+6      	; 0xd2 <Dot+0xa>
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	61 f0       	breq	.+24     	; 0xe8 <Dot+0x20>
  d0:	de c0       	rjmp	.+444    	; 0x28e <Dot+0x1c6>
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	20 91 0e 01 	lds	r18, 0x010E
  da:	30 91 0f 01 	lds	r19, 0x010F
  de:	23 2b       	or	r18, r19
  e0:	09 f0       	breq	.+2      	; 0xe4 <Dot+0x1c>
  e2:	d7 c0       	rjmp	.+430    	; 0x292 <Dot+0x1ca>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	d5 c0       	rjmp	.+426    	; 0x292 <Dot+0x1ca>
  e8:	80 91 06 01 	lds	r24, 0x0106
  ec:	90 91 07 01 	lds	r25, 0x0107
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	09 f0       	breq	.+2      	; 0xf8 <Dot+0x30>
  f6:	da c0       	rjmp	.+436    	; 0x2ac <Dot+0x1e4>
  f8:	20 91 04 01 	lds	r18, 0x0104
  fc:	30 91 05 01 	lds	r19, 0x0105
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	09 f0       	breq	.+2      	; 0x108 <Dot+0x40>
 106:	cd c0       	rjmp	.+410    	; 0x2a2 <Dot+0x1da>
 108:	80 91 00 01 	lds	r24, 0x0100
 10c:	90 91 01 01 	lds	r25, 0x0101
 110:	81 30       	cpi	r24, 0x01	; 1
 112:	91 05       	cpc	r25, r1
 114:	09 f4       	brne	.+2      	; 0x118 <Dot+0x50>
 116:	9d c0       	rjmp	.+314    	; 0x252 <Dot+0x18a>
 118:	20 91 02 01 	lds	r18, 0x0102
 11c:	30 91 03 01 	lds	r19, 0x0103
 120:	21 30       	cpi	r18, 0x01	; 1
 122:	31 05       	cpc	r19, r1
 124:	09 f4       	brne	.+2      	; 0x128 <Dot+0x60>
 126:	cb c0       	rjmp	.+406    	; 0x2be <Dot+0x1f6>
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	90 93 01 01 	sts	0x0101, r25
 130:	80 93 00 01 	sts	0x0100, r24
 134:	36 95       	lsr	r19
 136:	27 95       	ror	r18
 138:	30 93 03 01 	sts	0x0103, r19
 13c:	20 93 02 01 	sts	0x0102, r18
 140:	95 c0       	rjmp	.+298    	; 0x26c <Dot+0x1a4>
 142:	89 2b       	or	r24, r25
 144:	09 f0       	breq	.+2      	; 0x148 <Dot+0x80>
 146:	c0 c0       	rjmp	.+384    	; 0x2c8 <Dot+0x200>
 148:	80 91 00 01 	lds	r24, 0x0100
 14c:	90 91 01 01 	lds	r25, 0x0101
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	09 f4       	brne	.+2      	; 0x158 <Dot+0x90>
 156:	6d c0       	rjmp	.+218    	; 0x232 <Dot+0x16a>
 158:	20 91 02 01 	lds	r18, 0x0102
 15c:	30 91 03 01 	lds	r19, 0x0103
 160:	20 38       	cpi	r18, 0x80	; 128
 162:	31 05       	cpc	r19, r1
 164:	09 f4       	brne	.+2      	; 0x168 <Dot+0xa0>
 166:	ab c0       	rjmp	.+342    	; 0x2be <Dot+0x1f6>
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	90 93 01 01 	sts	0x0101, r25
 170:	80 93 00 01 	sts	0x0100, r24
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	30 93 03 01 	sts	0x0103, r19
 17c:	20 93 02 01 	sts	0x0102, r18
 180:	75 c0       	rjmp	.+234    	; 0x26c <Dot+0x1a4>
 182:	20 91 00 01 	lds	r18, 0x0100
 186:	30 91 01 01 	lds	r19, 0x0101
 18a:	20 31       	cpi	r18, 0x10	; 16
 18c:	31 05       	cpc	r19, r1
 18e:	09 f4       	brne	.+2      	; 0x192 <Dot+0xca>
 190:	4e c0       	rjmp	.+156    	; 0x22e <Dot+0x166>
 192:	80 91 02 01 	lds	r24, 0x0102
 196:	90 91 03 01 	lds	r25, 0x0103
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	91 05       	cpc	r25, r1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <Dot+0xda>
 1a0:	9c c0       	rjmp	.+312    	; 0x2da <Dot+0x212>
 1a2:	22 0f       	add	r18, r18
 1a4:	33 1f       	adc	r19, r19
 1a6:	30 93 01 01 	sts	0x0101, r19
 1aa:	20 93 00 01 	sts	0x0100, r18
 1ae:	96 95       	lsr	r25
 1b0:	87 95       	ror	r24
 1b2:	90 93 03 01 	sts	0x0103, r25
 1b6:	80 93 02 01 	sts	0x0102, r24
 1ba:	58 c0       	rjmp	.+176    	; 0x26c <Dot+0x1a4>
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	31 f5       	brne	.+76     	; 0x20c <Dot+0x144>
 1c0:	23 30       	cpi	r18, 0x03	; 3
 1c2:	31 05       	cpc	r19, r1
 1c4:	b1 f5       	brne	.+108    	; 0x232 <Dot+0x16a>
 1c6:	80 91 00 01 	lds	r24, 0x0100
 1ca:	90 91 01 01 	lds	r25, 0x0101
 1ce:	80 31       	cpi	r24, 0x10	; 16
 1d0:	91 05       	cpc	r25, r1
 1d2:	79 f1       	breq	.+94     	; 0x232 <Dot+0x16a>
 1d4:	20 91 02 01 	lds	r18, 0x0102
 1d8:	30 91 03 01 	lds	r19, 0x0103
 1dc:	20 38       	cpi	r18, 0x80	; 128
 1de:	31 05       	cpc	r19, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <Dot+0x11c>
 1e2:	7b c0       	rjmp	.+246    	; 0x2da <Dot+0x212>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	90 93 01 01 	sts	0x0101, r25
 1ec:	80 93 00 01 	sts	0x0100, r24
 1f0:	22 0f       	add	r18, r18
 1f2:	33 1f       	adc	r19, r19
 1f4:	30 93 03 01 	sts	0x0103, r19
 1f8:	20 93 02 01 	sts	0x0102, r18
 1fc:	37 c0       	rjmp	.+110    	; 0x26c <Dot+0x1a4>
 1fe:	96 95       	lsr	r25
 200:	87 95       	ror	r24
 202:	90 93 01 01 	sts	0x0101, r25
 206:	80 93 00 01 	sts	0x0100, r24
 20a:	30 c0       	rjmp	.+96     	; 0x26c <Dot+0x1a4>
 20c:	23 30       	cpi	r18, 0x03	; 3
 20e:	31 05       	cpc	r19, r1
 210:	71 f4       	brne	.+28     	; 0x22e <Dot+0x166>
 212:	20 91 00 01 	lds	r18, 0x0100
 216:	30 91 01 01 	lds	r19, 0x0101
 21a:	20 31       	cpi	r18, 0x10	; 16
 21c:	31 05       	cpc	r19, r1
 21e:	39 f0       	breq	.+14     	; 0x22e <Dot+0x166>
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	30 93 01 01 	sts	0x0101, r19
 228:	20 93 00 01 	sts	0x0100, r18
 22c:	1f c0       	rjmp	.+62     	; 0x26c <Dot+0x1a4>
 22e:	00 97       	sbiw	r24, 0x00	; 0
 230:	71 f4       	brne	.+28     	; 0x24e <Dot+0x186>
 232:	80 91 02 01 	lds	r24, 0x0102
 236:	90 91 03 01 	lds	r25, 0x0103
 23a:	80 38       	cpi	r24, 0x80	; 128
 23c:	91 05       	cpc	r25, r1
 23e:	b1 f0       	breq	.+44     	; 0x26c <Dot+0x1a4>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	90 93 03 01 	sts	0x0103, r25
 248:	80 93 02 01 	sts	0x0102, r24
 24c:	0f c0       	rjmp	.+30     	; 0x26c <Dot+0x1a4>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	69 f4       	brne	.+26     	; 0x26c <Dot+0x1a4>
 252:	80 91 02 01 	lds	r24, 0x0102
 256:	90 91 03 01 	lds	r25, 0x0103
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	91 05       	cpc	r25, r1
 25e:	31 f0       	breq	.+12     	; 0x26c <Dot+0x1a4>
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	90 93 03 01 	sts	0x0103, r25
 268:	80 93 02 01 	sts	0x0102, r24
 26c:	10 92 0f 01 	sts	0x010F, r1
 270:	10 92 0e 01 	sts	0x010E, r1
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	90 93 07 01 	sts	0x0107, r25
 27c:	80 93 06 01 	sts	0x0106, r24
 280:	90 93 05 01 	sts	0x0105, r25
 284:	80 93 04 01 	sts	0x0104, r24
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <Dot+0x1ca>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	20 91 02 01 	lds	r18, 0x0102
 296:	28 b9       	out	0x08, r18	; 8
 298:	20 91 00 01 	lds	r18, 0x0100
 29c:	20 95       	com	r18
 29e:	2b b9       	out	0x0b, r18	; 11
 2a0:	08 95       	ret
 2a2:	23 30       	cpi	r18, 0x03	; 3
 2a4:	31 05       	cpc	r19, r1
 2a6:	09 f0       	breq	.+2      	; 0x2aa <Dot+0x1e2>
 2a8:	b1 cf       	rjmp	.-158    	; 0x20c <Dot+0x144>
 2aa:	6b cf       	rjmp	.-298    	; 0x182 <Dot+0xba>
 2ac:	20 91 04 01 	lds	r18, 0x0104
 2b0:	30 91 05 01 	lds	r19, 0x0105
 2b4:	22 30       	cpi	r18, 0x02	; 2
 2b6:	31 05       	cpc	r19, r1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <Dot+0x1f4>
 2ba:	80 cf       	rjmp	.-256    	; 0x1bc <Dot+0xf4>
 2bc:	42 cf       	rjmp	.-380    	; 0x142 <Dot+0x7a>
 2be:	80 91 00 01 	lds	r24, 0x0100
 2c2:	90 91 01 01 	lds	r25, 0x0101
 2c6:	9b cf       	rjmp	.-202    	; 0x1fe <Dot+0x136>
 2c8:	80 91 00 01 	lds	r24, 0x0100
 2cc:	90 91 01 01 	lds	r25, 0x0101
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	91 05       	cpc	r25, r1
 2d4:	09 f0       	breq	.+2      	; 0x2d8 <Dot+0x210>
 2d6:	93 cf       	rjmp	.-218    	; 0x1fe <Dot+0x136>
 2d8:	c9 cf       	rjmp	.-110    	; 0x26c <Dot+0x1a4>
 2da:	20 91 00 01 	lds	r18, 0x0100
 2de:	30 91 01 01 	lds	r19, 0x0101
 2e2:	9e cf       	rjmp	.-196    	; 0x220 <Dot+0x158>

000002e4 <TimerISR>:
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	10 92 0d 01 	sts	0x010D, r1
 2f6:	80 91 10 01 	lds	r24, 0x0110
 2fa:	88 23       	and	r24, r24
 2fc:	09 f4       	brne	.+2      	; 0x300 <TimerISR+0x1c>
 2fe:	53 c0       	rjmp	.+166    	; 0x3a6 <TimerISR+0xc2>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	1b e0       	ldi	r17, 0x0B	; 11
 304:	c0 91 15 01 	lds	r28, 0x0115
 308:	d0 91 16 01 	lds	r29, 0x0116
 30c:	18 9f       	mul	r17, r24
 30e:	c0 0d       	add	r28, r0
 310:	d1 1d       	adc	r29, r1
 312:	11 24       	eor	r1, r1
 314:	4d 81       	ldd	r20, Y+5	; 0x05
 316:	5e 81       	ldd	r21, Y+6	; 0x06
 318:	6f 81       	ldd	r22, Y+7	; 0x07
 31a:	78 85       	ldd	r23, Y+8	; 0x08
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	9a 81       	ldd	r25, Y+2	; 0x02
 320:	ab 81       	ldd	r26, Y+3	; 0x03
 322:	bc 81       	ldd	r27, Y+4	; 0x04
 324:	48 17       	cp	r20, r24
 326:	59 07       	cpc	r21, r25
 328:	6a 07       	cpc	r22, r26
 32a:	7b 07       	cpc	r23, r27
 32c:	b0 f0       	brcs	.+44     	; 0x35a <TimerISR+0x76>
 32e:	88 81       	ld	r24, Y
 330:	e9 85       	ldd	r30, Y+9	; 0x09
 332:	fa 85       	ldd	r31, Y+10	; 0x0a
 334:	08 2e       	mov	r0, r24
 336:	00 0c       	add	r0, r0
 338:	99 0b       	sbc	r25, r25
 33a:	09 95       	icall
 33c:	88 83       	st	Y, r24
 33e:	80 91 0d 01 	lds	r24, 0x010D
 342:	e0 91 15 01 	lds	r30, 0x0115
 346:	f0 91 16 01 	lds	r31, 0x0116
 34a:	18 9f       	mul	r17, r24
 34c:	e0 0d       	add	r30, r0
 34e:	f1 1d       	adc	r31, r1
 350:	11 24       	eor	r1, r1
 352:	15 82       	std	Z+5, r1	; 0x05
 354:	16 82       	std	Z+6, r1	; 0x06
 356:	17 82       	std	Z+7, r1	; 0x07
 358:	10 86       	std	Z+8, r1	; 0x08
 35a:	80 91 0d 01 	lds	r24, 0x010D
 35e:	e0 91 15 01 	lds	r30, 0x0115
 362:	f0 91 16 01 	lds	r31, 0x0116
 366:	18 9f       	mul	r17, r24
 368:	e0 0d       	add	r30, r0
 36a:	f1 1d       	adc	r31, r1
 36c:	11 24       	eor	r1, r1
 36e:	c5 80       	ldd	r12, Z+5	; 0x05
 370:	d6 80       	ldd	r13, Z+6	; 0x06
 372:	e7 80       	ldd	r14, Z+7	; 0x07
 374:	f0 84       	ldd	r15, Z+8	; 0x08
 376:	40 91 08 01 	lds	r20, 0x0108
 37a:	50 91 09 01 	lds	r21, 0x0109
 37e:	60 91 0a 01 	lds	r22, 0x010A
 382:	70 91 0b 01 	lds	r23, 0x010B
 386:	4c 0d       	add	r20, r12
 388:	5d 1d       	adc	r21, r13
 38a:	6e 1d       	adc	r22, r14
 38c:	7f 1d       	adc	r23, r15
 38e:	45 83       	std	Z+5, r20	; 0x05
 390:	56 83       	std	Z+6, r21	; 0x06
 392:	67 83       	std	Z+7, r22	; 0x07
 394:	70 87       	std	Z+8, r23	; 0x08
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	80 93 0d 01 	sts	0x010D, r24
 39c:	90 91 10 01 	lds	r25, 0x0110
 3a0:	89 17       	cp	r24, r25
 3a2:	08 f4       	brcc	.+2      	; 0x3a6 <TimerISR+0xc2>
 3a4:	af cf       	rjmp	.-162    	; 0x304 <TimerISR+0x20>
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	08 95       	ret

000003b6 <__vector_13>:
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	0b b6       	in	r0, 0x3b	; 59
 3c2:	0f 92       	push	r0
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
 3dc:	80 91 11 01 	lds	r24, 0x0111
 3e0:	90 91 12 01 	lds	r25, 0x0112
 3e4:	a0 91 13 01 	lds	r26, 0x0113
 3e8:	b0 91 14 01 	lds	r27, 0x0114
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	a1 09       	sbc	r26, r1
 3f0:	b1 09       	sbc	r27, r1
 3f2:	80 93 11 01 	sts	0x0111, r24
 3f6:	90 93 12 01 	sts	0x0112, r25
 3fa:	a0 93 13 01 	sts	0x0113, r26
 3fe:	b0 93 14 01 	sts	0x0114, r27
 402:	89 2b       	or	r24, r25
 404:	8a 2b       	or	r24, r26
 406:	8b 2b       	or	r24, r27
 408:	89 f4       	brne	.+34     	; 0x42c <__vector_13+0x76>
 40a:	6c df       	rcall	.-296    	; 0x2e4 <TimerISR>
 40c:	80 91 08 01 	lds	r24, 0x0108
 410:	90 91 09 01 	lds	r25, 0x0109
 414:	a0 91 0a 01 	lds	r26, 0x010A
 418:	b0 91 0b 01 	lds	r27, 0x010B
 41c:	80 93 11 01 	sts	0x0111, r24
 420:	90 93 12 01 	sts	0x0112, r25
 424:	a0 93 13 01 	sts	0x0113, r26
 428:	b0 93 14 01 	sts	0x0114, r27
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <TimerOn>:
}

///////////////////////////////////////////////////////////////////////////////
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	TCCR1B 	= (1<<WGM12)|(1<<CS11)|(1<<CS10);
 452:	8b e0       	ldi	r24, 0x0B	; 11
 454:	80 93 81 00 	sts	0x0081, r24
					// Thus TCCR1B = 00001011 or 0x0B
					// So, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
					// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A 	= 125;	// Timer interrupt will be generated when TCNT1==OCR1A
 458:	8d e7       	ldi	r24, 0x7D	; 125
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 89 00 	sts	0x0089, r25
 460:	80 93 88 00 	sts	0x0088, r24
					// So when TCNT1 register equals 125,
					// 1 ms has passed. Thus, we compare to 125.
					// AVR timer interrupt mask register

#if defined (__AVR_ATmega1284__)
    TIMSK1 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega1284
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	80 93 6f 00 	sts	0x006F, r24
#else
    TIMSK 	= (1<<OCIE1A); // OCIE1A (bit1): enables compare match interrupt - ATMega32
#endif

	// Initialize avr counter
	TCNT1 = 0;
 46a:	10 92 85 00 	sts	0x0085, r1
 46e:	10 92 84 00 	sts	0x0084, r1

	// TimerISR will be called every tasksPeriodCntDown milliseconds
	tasksPeriodCntDown = tasksPeriodGCD;
 472:	80 91 08 01 	lds	r24, 0x0108
 476:	90 91 09 01 	lds	r25, 0x0109
 47a:	a0 91 0a 01 	lds	r26, 0x010A
 47e:	b0 91 0b 01 	lds	r27, 0x010B
 482:	80 93 11 01 	sts	0x0111, r24
 486:	90 93 12 01 	sts	0x0112, r25
 48a:	a0 93 13 01 	sts	0x0113, r26
 48e:	b0 93 14 01 	sts	0x0114, r27

	// Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
 492:	8f b7       	in	r24, 0x3f	; 63
 494:	80 68       	ori	r24, 0x80	; 128
 496:	8f bf       	out	0x3f, r24	; 63
 498:	08 95       	ret

0000049a <A2D_init>:

#include <avr/io.h>
#include "scheduler.h"

void A2D_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 49a:	ea e7       	ldi	r30, 0x7A	; 122
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	80 6e       	ori	r24, 0xE0	; 224
 4a2:	80 83       	st	Z, r24
 4a4:	08 95       	ret

000004a6 <Set_A2D_Pin>:
// The value of pinNum determines the pin on PORTA
//    used for A2D conversion
// Valid values range between 0 and 7, where the value
//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 4a6:	88 30       	cpi	r24, 0x08	; 8
 4a8:	60 f0       	brcs	.+24     	; 0x4c2 <Set_A2D_Pin+0x1c>
 4aa:	ec e7       	ldi	r30, 0x7C	; 124
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	80 81       	ld	r24, Z
 4b0:	80 83       	st	Z, r24
//    The default channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA
//    used for A2D conversion
// Valid values range between 0 and 7, where the value
//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
 4b2:	8f e0       	ldi	r24, 0x0F	; 15
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
		// Allow channel to stabilize
		static unsigned char i = 0;
		for ( i=0; i<15; i++ ) { asm("nop"); }
 4b4:	00 00       	nop
 4b6:	81 50       	subi	r24, 0x01	; 1
 4b8:	e9 f7       	brne	.-6      	; 0x4b4 <Set_A2D_Pin+0xe>
 4ba:	8f e0       	ldi	r24, 0x0F	; 15
 4bc:	80 93 0c 01 	sts	0x010C, r24
 4c0:	08 95       	ret
// The value of pinNum determines the pin on PORTA
//    used for A2D conversion
// Valid values range between 0 and 7, where the value
//    represents the desired pin for A2D conversion
	void Set_A2D_Pin(unsigned char pinNum) {
		ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 4c2:	80 93 7c 00 	sts	0x007C, r24
 4c6:	f5 cf       	rjmp	.-22     	; 0x4b2 <Set_A2D_Pin+0xc>

000004c8 <getDirectionHORZ>:
enum {LEFT, RIGHT, UP, DOWN, TOPLEFT, TOPRIGHT, BOTTOMLEFT, BOTTOMRIGHT};

int getDirectionHORZ ()
{

	Set_A2D_Pin(0x00);
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	ed df       	rcall	.-38     	; 0x4a6 <Set_A2D_Pin>
	short input = ADC;
 4cc:	20 91 78 00 	lds	r18, 0x0078
 4d0:	30 91 79 00 	lds	r19, 0x0079
	
	if (input > 480 && input <= 504)
 4d4:	c9 01       	movw	r24, r18
 4d6:	81 5e       	subi	r24, 0xE1	; 225
 4d8:	91 40       	sbci	r25, 0x01	; 1
 4da:	88 31       	cpi	r24, 0x18	; 24
 4dc:	91 05       	cpc	r25, r1
 4de:	80 f0       	brcs	.+32     	; 0x500 <getDirectionHORZ+0x38>
		return -1;
	else if (input >= 768 && input < 1000)
 4e0:	8f 51       	subi	r24, 0x1F	; 31
 4e2:	91 40       	sbci	r25, 0x01	; 1
 4e4:	88 3e       	cpi	r24, 0xE8	; 232
 4e6:	91 05       	cpc	r25, r1
 4e8:	70 f0       	brcs	.+28     	; 0x506 <getDirectionHORZ+0x3e>
		return RIGHT;
	else if (input < 350)
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2e 35       	cpi	r18, 0x5E	; 94
 4f0:	31 40       	sbci	r19, 0x01	; 1
 4f2:	14 f4       	brge	.+4      	; 0x4f8 <getDirectionHORZ+0x30>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	91 95       	neg	r25
 4fa:	81 95       	neg	r24
 4fc:	91 09       	sbc	r25, r1
 4fe:	08 95       	ret

	Set_A2D_Pin(0x00);
	short input = ADC;
	
	if (input > 480 && input <= 504)
		return -1;
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	08 95       	ret
	else if (input >= 768 && input < 1000)
		return RIGHT;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
	else if (input < 350)
		return LEFT;
	return -1;
}
 50a:	08 95       	ret

0000050c <getDirectionVERT>:

int getDirectionVERT()
{
	Set_A2D_Pin(0x07);
 50c:	87 e0       	ldi	r24, 0x07	; 7
 50e:	cb df       	rcall	.-106    	; 0x4a6 <Set_A2D_Pin>
	short input = ADC;
 510:	80 91 78 00 	lds	r24, 0x0078
 514:	90 91 79 00 	lds	r25, 0x0079
 518:	9c 01       	movw	r18, r24
	
	if (input == 536)
 51a:	88 31       	cpi	r24, 0x18	; 24
 51c:	42 e0       	ldi	r20, 0x02	; 2
 51e:	94 07       	cpc	r25, r20
 520:	59 f0       	breq	.+22     	; 0x538 <getDirectionVERT+0x2c>
		return -1;
	else if (input > 700 && input < 900)
 522:	8d 5b       	subi	r24, 0xBD	; 189
 524:	92 40       	sbci	r25, 0x02	; 2
 526:	87 3c       	cpi	r24, 0xC7	; 199
 528:	91 05       	cpc	r25, r1
 52a:	48 f0       	brcs	.+18     	; 0x53e <getDirectionVERT+0x32>
		return UP;
	else if (input < 480)
 52c:	20 3e       	cpi	r18, 0xE0	; 224
 52e:	31 40       	sbci	r19, 0x01	; 1
 530:	4c f0       	brlt	.+18     	; 0x544 <getDirectionVERT+0x38>
		return DOWN;
	else
		return -1;
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	9f ef       	ldi	r25, 0xFF	; 255
 536:	08 95       	ret
{
	Set_A2D_Pin(0x07);
	short input = ADC;
	
	if (input == 536)
		return -1;
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	9f ef       	ldi	r25, 0xFF	; 255
 53c:	08 95       	ret
	else if (input > 700 && input < 900)
		return UP;
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	08 95       	ret
	else if (input < 480)
		return DOWN;
 544:	83 e0       	ldi	r24, 0x03	; 3
 546:	90 e0       	ldi	r25, 0x00	; 0
	else
		return -1;
}
 548:	08 95       	ret

0000054a <Joystick>:

enum JoyStates{getInput};
int Joystick(int state)
{
	switch (state)
 54a:	89 2b       	or	r24, r25
 54c:	81 f4       	brne	.+32     	; 0x56e <Joystick+0x24>
	{
		case getInput:
			x_axis = getDirectionHORZ();
 54e:	bc df       	rcall	.-136    	; 0x4c8 <getDirectionHORZ>
 550:	90 93 07 01 	sts	0x0107, r25
 554:	80 93 06 01 	sts	0x0106, r24
			y_axis = getDirectionVERT();
 558:	d9 df       	rcall	.-78     	; 0x50c <getDirectionVERT>
 55a:	90 93 05 01 	sts	0x0105, r25
 55e:	80 93 04 01 	sts	0x0104, r24
			go = 1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 0f 01 	sts	0x010F, r25
 56a:	80 93 0e 01 	sts	0x010E, r24
			state = getInput;
			break;
	}
	
	return state;
}
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 95       	ret

00000574 <main>:
}

// shift rows ~(0x01 << 1)

int main(void)
{
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	66 97       	sbiw	r28, 0x16	; 22
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	f8 94       	cli
 582:	de bf       	out	0x3e, r29	; 62
 584:	0f be       	out	0x3f, r0	; 63
 586:	cd bf       	out	0x3d, r28	; 61
	// initialize ports as outputs
	DDRD = 0xFF; PORTD = 0x00;
 588:	1f ef       	ldi	r17, 0xFF	; 255
 58a:	1a b9       	out	0x0a, r17	; 10
 58c:	1b b8       	out	0x0b, r1	; 11
	DDRB = 0xFF; PORTB = 0x00;
 58e:	14 b9       	out	0x04, r17	; 4
 590:	15 b8       	out	0x05, r1	; 5
		
	DDRC = 0xFF;
 592:	17 b9       	out	0x07, r17	; 7

	A2D_init();
 594:	82 df       	rcall	.-252    	; 0x49a <A2D_init>
	
	tasksNum = 2;
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	80 93 10 01 	sts	0x0110, r24
	task taskList[tasksNum];
	tasks = taskList;
 59c:	ce 01       	movw	r24, r28
 59e:	01 96       	adiw	r24, 0x01	; 1
 5a0:	90 93 16 01 	sts	0x0116, r25
 5a4:	80 93 15 01 	sts	0x0115, r24
		
		
	// define tasks
	unsigned char i=0; // task number

	tasks[i].state = -1;
 5a8:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 150;
 5aa:	86 e9       	ldi	r24, 0x96	; 150
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	a0 e0       	ldi	r26, 0x00	; 0
 5b0:	b0 e0       	ldi	r27, 0x00	; 0
 5b2:	8a 83       	std	Y+2, r24	; 0x02
 5b4:	9b 83       	std	Y+3, r25	; 0x03
 5b6:	ac 83       	std	Y+4, r26	; 0x04
 5b8:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 5ba:	8e 83       	std	Y+6, r24	; 0x06
 5bc:	9f 83       	std	Y+7, r25	; 0x07
 5be:	a8 87       	std	Y+8, r26	; 0x08
 5c0:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &Dot;
 5c2:	84 e6       	ldi	r24, 0x64	; 100
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	9b 87       	std	Y+11, r25	; 0x0b
 5c8:	8a 87       	std	Y+10, r24	; 0x0a
	++i;
	tasks[i].state = -1;
 5ca:	1c 87       	std	Y+12, r17	; 0x0c
	tasks[i].period = 30;
 5cc:	8e e1       	ldi	r24, 0x1E	; 30
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a0 e0       	ldi	r26, 0x00	; 0
 5d2:	b0 e0       	ldi	r27, 0x00	; 0
 5d4:	8d 87       	std	Y+13, r24	; 0x0d
 5d6:	9e 87       	std	Y+14, r25	; 0x0e
 5d8:	af 87       	std	Y+15, r26	; 0x0f
 5da:	b8 8b       	std	Y+16, r27	; 0x10
	tasks[i].elapsedTime = tasks[i].period;
 5dc:	89 8b       	std	Y+17, r24	; 0x11
 5de:	9a 8b       	std	Y+18, r25	; 0x12
 5e0:	ab 8b       	std	Y+19, r26	; 0x13
 5e2:	bc 8b       	std	Y+20, r27	; 0x14
	tasks[i].TickFct = &Joystick;
 5e4:	85 ea       	ldi	r24, 0xA5	; 165
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	9e 8b       	std	Y+22, r25	; 0x16
 5ea:	8d 8b       	std	Y+21, r24	; 0x15
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 5ec:	82 e3       	ldi	r24, 0x32	; 50
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	a0 e0       	ldi	r26, 0x00	; 0
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	80 93 08 01 	sts	0x0108, r24
 5f8:	90 93 09 01 	sts	0x0109, r25
 5fc:	a0 93 0a 01 	sts	0x010A, r26
 600:	b0 93 0b 01 	sts	0x010B, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 604:	80 93 11 01 	sts	0x0111, r24
 608:	90 93 12 01 	sts	0x0112, r25
 60c:	a0 93 13 01 	sts	0x0113, r26
 610:	b0 93 14 01 	sts	0x0114, r27
	++i;
	
		
	TimerSet(50); // value set should be GCD of all tasks
	TimerOn();
 614:	1e df       	rcall	.-452    	; 0x452 <TimerOn>
	
    /* Replace with your application code */
    while (1) 
    {
    }
 616:	ff cf       	rjmp	.-2      	; 0x616 <main+0xa2>

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
