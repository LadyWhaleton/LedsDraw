
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000444  000004d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000444  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800104  00800104  000004dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000050c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e7  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000028b  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ff  00000000  00000000  00000f8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000305  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d5  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	b2 c0       	rjmp	.+356    	; 0x19a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e4       	ldi	r30, 0x44	; 68
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 30       	cpi	r26, 0x0C	; 12
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7a d1       	rcall	.+756    	; 0x3b8 <main>
  c4:	bd c1       	rjmp	.+890    	; 0x440 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
	
	PORTC = col;	// Pattern to display
	PORTD = ~(row);		// Row(s) displaying pattern
	
	return state;
}
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	1f 93       	push	r17
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	10 92 04 01 	sts	0x0104, r1
  da:	80 91 05 01 	lds	r24, 0x0105
  de:	88 23       	and	r24, r24
  e0:	09 f4       	brne	.+2      	; 0xe4 <TimerISR+0x1c>
  e2:	53 c0       	rjmp	.+166    	; 0x18a <TimerISR+0xc2>
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	1b e0       	ldi	r17, 0x0B	; 11
  e8:	c0 91 0a 01 	lds	r28, 0x010A
  ec:	d0 91 0b 01 	lds	r29, 0x010B
  f0:	18 9f       	mul	r17, r24
  f2:	c0 0d       	add	r28, r0
  f4:	d1 1d       	adc	r29, r1
  f6:	11 24       	eor	r1, r1
  f8:	4d 81       	ldd	r20, Y+5	; 0x05
  fa:	5e 81       	ldd	r21, Y+6	; 0x06
  fc:	6f 81       	ldd	r22, Y+7	; 0x07
  fe:	78 85       	ldd	r23, Y+8	; 0x08
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	9a 81       	ldd	r25, Y+2	; 0x02
 104:	ab 81       	ldd	r26, Y+3	; 0x03
 106:	bc 81       	ldd	r27, Y+4	; 0x04
 108:	48 17       	cp	r20, r24
 10a:	59 07       	cpc	r21, r25
 10c:	6a 07       	cpc	r22, r26
 10e:	7b 07       	cpc	r23, r27
 110:	b0 f0       	brcs	.+44     	; 0x13e <TimerISR+0x76>
 112:	88 81       	ld	r24, Y
 114:	e9 85       	ldd	r30, Y+9	; 0x09
 116:	fa 85       	ldd	r31, Y+10	; 0x0a
 118:	08 2e       	mov	r0, r24
 11a:	00 0c       	add	r0, r0
 11c:	99 0b       	sbc	r25, r25
 11e:	09 95       	icall
 120:	88 83       	st	Y, r24
 122:	80 91 04 01 	lds	r24, 0x0104
 126:	e0 91 0a 01 	lds	r30, 0x010A
 12a:	f0 91 0b 01 	lds	r31, 0x010B
 12e:	18 9f       	mul	r17, r24
 130:	e0 0d       	add	r30, r0
 132:	f1 1d       	adc	r31, r1
 134:	11 24       	eor	r1, r1
 136:	15 82       	std	Z+5, r1	; 0x05
 138:	16 82       	std	Z+6, r1	; 0x06
 13a:	17 82       	std	Z+7, r1	; 0x07
 13c:	10 86       	std	Z+8, r1	; 0x08
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	e0 91 0a 01 	lds	r30, 0x010A
 146:	f0 91 0b 01 	lds	r31, 0x010B
 14a:	18 9f       	mul	r17, r24
 14c:	e0 0d       	add	r30, r0
 14e:	f1 1d       	adc	r31, r1
 150:	11 24       	eor	r1, r1
 152:	c5 80       	ldd	r12, Z+5	; 0x05
 154:	d6 80       	ldd	r13, Z+6	; 0x06
 156:	e7 80       	ldd	r14, Z+7	; 0x07
 158:	f0 84       	ldd	r15, Z+8	; 0x08
 15a:	40 91 00 01 	lds	r20, 0x0100
 15e:	50 91 01 01 	lds	r21, 0x0101
 162:	60 91 02 01 	lds	r22, 0x0102
 166:	70 91 03 01 	lds	r23, 0x0103
 16a:	4c 0d       	add	r20, r12
 16c:	5d 1d       	adc	r21, r13
 16e:	6e 1d       	adc	r22, r14
 170:	7f 1d       	adc	r23, r15
 172:	45 83       	std	Z+5, r20	; 0x05
 174:	56 83       	std	Z+6, r21	; 0x06
 176:	67 83       	std	Z+7, r22	; 0x07
 178:	70 87       	std	Z+8, r23	; 0x08
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 04 01 	sts	0x0104, r24
 180:	90 91 05 01 	lds	r25, 0x0105
 184:	89 17       	cp	r24, r25
 186:	08 f4       	brcc	.+2      	; 0x18a <TimerISR+0xc2>
 188:	af cf       	rjmp	.-162    	; 0xe8 <TimerISR+0x20>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <__vector_13>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	80 91 06 01 	lds	r24, 0x0106
 1c4:	90 91 07 01 	lds	r25, 0x0107
 1c8:	a0 91 08 01 	lds	r26, 0x0108
 1cc:	b0 91 09 01 	lds	r27, 0x0109
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	a1 09       	sbc	r26, r1
 1d4:	b1 09       	sbc	r27, r1
 1d6:	80 93 06 01 	sts	0x0106, r24
 1da:	90 93 07 01 	sts	0x0107, r25
 1de:	a0 93 08 01 	sts	0x0108, r26
 1e2:	b0 93 09 01 	sts	0x0109, r27
 1e6:	89 2b       	or	r24, r25
 1e8:	8a 2b       	or	r24, r26
 1ea:	8b 2b       	or	r24, r27
 1ec:	89 f4       	brne	.+34     	; 0x210 <__vector_13+0x76>
 1ee:	6c df       	rcall	.-296    	; 0xc8 <TimerISR>
 1f0:	80 91 00 01 	lds	r24, 0x0100
 1f4:	90 91 01 01 	lds	r25, 0x0101
 1f8:	a0 91 02 01 	lds	r26, 0x0102
 1fc:	b0 91 03 01 	lds	r27, 0x0103
 200:	80 93 06 01 	sts	0x0106, r24
 204:	90 93 07 01 	sts	0x0107, r25
 208:	a0 93 08 01 	sts	0x0108, r26
 20c:	b0 93 09 01 	sts	0x0109, r27
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0b be       	out	0x3b, r0	; 59
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <TimerOn>:
 236:	8b e0       	ldi	r24, 0x0B	; 11
 238:	80 93 81 00 	sts	0x0081, r24
 23c:	8d e7       	ldi	r24, 0x7D	; 125
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25
 244:	80 93 88 00 	sts	0x0088, r24
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 6f 00 	sts	0x006F, r24
 24e:	10 92 85 00 	sts	0x0085, r1
 252:	10 92 84 00 	sts	0x0084, r1
 256:	80 91 00 01 	lds	r24, 0x0100
 25a:	90 91 01 01 	lds	r25, 0x0101
 25e:	a0 91 02 01 	lds	r26, 0x0102
 262:	b0 91 03 01 	lds	r27, 0x0103
 266:	80 93 06 01 	sts	0x0106, r24
 26a:	90 93 07 01 	sts	0x0107, r25
 26e:	a0 93 08 01 	sts	0x0108, r26
 272:	b0 93 09 01 	sts	0x0109, r27
 276:	8f b7       	in	r24, 0x3f	; 63
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	08 95       	ret

0000027e <GetKeypadKey>:
 27e:	8f ee       	ldi	r24, 0xEF	; 239
 280:	8b b9       	out	0x0b, r24	; 11
 282:	00 00       	nop
 284:	48 9b       	sbis	0x09, 0	; 9
 286:	29 c0       	rjmp	.+82     	; 0x2da <GetKeypadKey+0x5c>
 288:	49 9b       	sbis	0x09, 1	; 9
 28a:	29 c0       	rjmp	.+82     	; 0x2de <GetKeypadKey+0x60>
 28c:	4a 9b       	sbis	0x09, 2	; 9
 28e:	29 c0       	rjmp	.+82     	; 0x2e2 <GetKeypadKey+0x64>
 290:	4b 9b       	sbis	0x09, 3	; 9
 292:	29 c0       	rjmp	.+82     	; 0x2e6 <GetKeypadKey+0x68>
 294:	8f ed       	ldi	r24, 0xDF	; 223
 296:	8b b9       	out	0x0b, r24	; 11
 298:	00 00       	nop
 29a:	48 9b       	sbis	0x09, 0	; 9
 29c:	26 c0       	rjmp	.+76     	; 0x2ea <GetKeypadKey+0x6c>
 29e:	49 9b       	sbis	0x09, 1	; 9
 2a0:	26 c0       	rjmp	.+76     	; 0x2ee <GetKeypadKey+0x70>
 2a2:	4a 9b       	sbis	0x09, 2	; 9
 2a4:	26 c0       	rjmp	.+76     	; 0x2f2 <GetKeypadKey+0x74>
 2a6:	4b 9b       	sbis	0x09, 3	; 9
 2a8:	26 c0       	rjmp	.+76     	; 0x2f6 <GetKeypadKey+0x78>
 2aa:	8f eb       	ldi	r24, 0xBF	; 191
 2ac:	8b b9       	out	0x0b, r24	; 11
 2ae:	00 00       	nop
 2b0:	48 9b       	sbis	0x09, 0	; 9
 2b2:	23 c0       	rjmp	.+70     	; 0x2fa <GetKeypadKey+0x7c>
 2b4:	49 9b       	sbis	0x09, 1	; 9
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <GetKeypadKey+0x80>
 2b8:	4a 9b       	sbis	0x09, 2	; 9
 2ba:	23 c0       	rjmp	.+70     	; 0x302 <GetKeypadKey+0x84>
 2bc:	4b 9b       	sbis	0x09, 3	; 9
 2be:	23 c0       	rjmp	.+70     	; 0x306 <GetKeypadKey+0x88>
 2c0:	8f e7       	ldi	r24, 0x7F	; 127
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	00 00       	nop
 2c6:	48 9b       	sbis	0x09, 0	; 9
 2c8:	20 c0       	rjmp	.+64     	; 0x30a <GetKeypadKey+0x8c>
 2ca:	49 9b       	sbis	0x09, 1	; 9
 2cc:	20 c0       	rjmp	.+64     	; 0x30e <GetKeypadKey+0x90>
 2ce:	4a 9b       	sbis	0x09, 2	; 9
 2d0:	20 c0       	rjmp	.+64     	; 0x312 <GetKeypadKey+0x94>
 2d2:	4b 9b       	sbis	0x09, 3	; 9
 2d4:	20 c0       	rjmp	.+64     	; 0x316 <GetKeypadKey+0x98>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	08 95       	ret
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
 2de:	84 e3       	ldi	r24, 0x34	; 52
 2e0:	08 95       	ret
 2e2:	87 e3       	ldi	r24, 0x37	; 55
 2e4:	08 95       	ret
 2e6:	8a e2       	ldi	r24, 0x2A	; 42
 2e8:	08 95       	ret
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
 2ee:	85 e3       	ldi	r24, 0x35	; 53
 2f0:	08 95       	ret
 2f2:	88 e3       	ldi	r24, 0x38	; 56
 2f4:	08 95       	ret
 2f6:	80 e3       	ldi	r24, 0x30	; 48
 2f8:	08 95       	ret
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
 2fe:	86 e3       	ldi	r24, 0x36	; 54
 300:	08 95       	ret
 302:	89 e3       	ldi	r24, 0x39	; 57
 304:	08 95       	ret
 306:	83 e2       	ldi	r24, 0x23	; 35
 308:	08 95       	ret
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
 30e:	82 e4       	ldi	r24, 0x42	; 66
 310:	08 95       	ret
 312:	83 e4       	ldi	r24, 0x43	; 67
 314:	08 95       	ret
 316:	84 e4       	ldi	r24, 0x44	; 68
 318:	08 95       	ret

0000031a <delay_ms>:
 31a:	18 16       	cp	r1, r24
 31c:	19 06       	cpc	r1, r25
 31e:	5c f0       	brlt	.+22     	; 0x336 <delay_ms+0x1c>
 320:	08 95       	ret
 322:	00 00       	nop
 324:	21 50       	subi	r18, 0x01	; 1
 326:	31 09       	sbc	r19, r1
 328:	e1 f7       	brne	.-8      	; 0x322 <delay_ms+0x8>
 32a:	4f 5f       	subi	r20, 0xFF	; 255
 32c:	5f 4f       	sbci	r21, 0xFF	; 255
 32e:	48 17       	cp	r20, r24
 330:	59 07       	cpc	r21, r25
 332:	29 f4       	brne	.+10     	; 0x33e <delay_ms+0x24>
 334:	08 95       	ret
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	77 e0       	ldi	r23, 0x07	; 7
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	27 2f       	mov	r18, r23
 340:	36 2f       	mov	r19, r22
 342:	ef cf       	rjmp	.-34     	; 0x322 <delay_ms+0x8>

00000344 <LCD_WriteCommand>:
 344:	17 98       	cbi	0x02, 7	; 2
 346:	88 b9       	out	0x08, r24	; 8
 348:	16 9a       	sbi	0x02, 6	; 2
 34a:	00 00       	nop
 34c:	16 98       	cbi	0x02, 6	; 2
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	e3 cf       	rjmp	.-58     	; 0x31a <delay_ms>
 354:	08 95       	ret

00000356 <LCD_init>:
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	df df       	rcall	.-66     	; 0x31a <delay_ms>
 35c:	88 e3       	ldi	r24, 0x38	; 56
 35e:	f2 df       	rcall	.-28     	; 0x344 <LCD_WriteCommand>
 360:	86 e0       	ldi	r24, 0x06	; 6
 362:	f0 df       	rcall	.-32     	; 0x344 <LCD_WriteCommand>
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	ee df       	rcall	.-36     	; 0x344 <LCD_WriteCommand>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	ec df       	rcall	.-40     	; 0x344 <LCD_WriteCommand>
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	d4 cf       	rjmp	.-88     	; 0x31a <delay_ms>
 372:	08 95       	ret

00000374 <LCD_WriteData>:
 374:	17 9a       	sbi	0x02, 7	; 2
 376:	88 b9       	out	0x08, r24	; 8
 378:	16 9a       	sbi	0x02, 6	; 2
 37a:	00 00       	nop
 37c:	16 98       	cbi	0x02, 6	; 2
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	cb cf       	rjmp	.-106    	; 0x31a <delay_ms>
 384:	08 95       	ret

00000386 <LCD_Cursor>:
 386:	81 31       	cpi	r24, 0x11	; 17
 388:	18 f4       	brcc	.+6      	; 0x390 <LCD_Cursor+0xa>
 38a:	81 58       	subi	r24, 0x81	; 129
 38c:	db cf       	rjmp	.-74     	; 0x344 <LCD_WriteCommand>
 38e:	08 95       	ret
 390:	81 55       	subi	r24, 0x51	; 81
 392:	d8 cf       	rjmp	.-80     	; 0x344 <LCD_WriteCommand>
 394:	08 95       	ret

00000396 <Task_GetInput>:
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	8c 01       	movw	r16, r24
 39e:	6f df       	rcall	.-290    	; 0x27e <GetKeypadKey>
 3a0:	c8 2f       	mov	r28, r24
 3a2:	88 23       	and	r24, r24
 3a4:	21 f0       	breq	.+8      	; 0x3ae <Task_GetInput+0x18>
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	ee df       	rcall	.-36     	; 0x386 <LCD_Cursor>
 3aa:	8c 2f       	mov	r24, r28
 3ac:	e3 df       	rcall	.-58     	; 0x374 <LCD_WriteData>
 3ae:	c8 01       	movw	r24, r16
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <main>:
}

// shift rows ~(0x01 << 1)

int main(void)
{
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	2b 97       	sbiw	r28, 0x0b	; 11
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF; PORTA = 0x00; // LCD control lines, output
 3cc:	1f ef       	ldi	r17, 0xFF	; 255
 3ce:	11 b9       	out	0x01, r17	; 1
 3d0:	12 b8       	out	0x02, r1	; 2
	DDRC = 0xFF; PORTC = 0x00; // LCD_data lines, output
 3d2:	17 b9       	out	0x07, r17	; 7
 3d4:	18 b8       	out	0x08, r1	; 8
	
	DDRD = 0xF0; PORTD = 0x0F;; // initialize input ports for keypad
 3d6:	80 ef       	ldi	r24, 0xF0	; 240
 3d8:	8a b9       	out	0x0a, r24	; 10
 3da:	8f e0       	ldi	r24, 0x0F	; 15
 3dc:	8b b9       	out	0x0b, r24	; 11
	
	LCD_init();
 3de:	bb df       	rcall	.-138    	; 0x356 <LCD_init>

	tasksNum = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 05 01 	sts	0x0105, r24
	task taskList[tasksNum];
	tasks = taskList;
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	90 93 0b 01 	sts	0x010B, r25
 3ee:	80 93 0a 01 	sts	0x010A, r24
	tasks[i].TickFct = &Task_DisplayImage;
	++i;
	*/
	
	// Task that will obtain input from the keypad
	tasks[i].state = -1;
 3f2:	19 83       	std	Y+1, r17	; 0x01
	tasks[i].period = 100;
 3f4:	84 e6       	ldi	r24, 0x64	; 100
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	a0 e0       	ldi	r26, 0x00	; 0
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	8a 83       	std	Y+2, r24	; 0x02
 3fe:	9b 83       	std	Y+3, r25	; 0x03
 400:	ac 83       	std	Y+4, r26	; 0x04
 402:	bd 83       	std	Y+5, r27	; 0x05
	tasks[i].elapsedTime = tasks[i].period;
 404:	8e 83       	std	Y+6, r24	; 0x06
 406:	9f 83       	std	Y+7, r25	; 0x07
 408:	a8 87       	std	Y+8, r26	; 0x08
 40a:	b9 87       	std	Y+9, r27	; 0x09
	tasks[i].TickFct = &Task_GetInput;
 40c:	8b ec       	ldi	r24, 0xCB	; 203
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	9b 87       	std	Y+11, r25	; 0x0b
 412:	8a 87       	std	Y+10, r24	; 0x0a
}

///////////////////////////////////////////////////////////////////////////////
// Set TimerISR() to tick every m ms
void TimerSet(unsigned long m) {
	tasksPeriodGCD = m;
 414:	82 e3       	ldi	r24, 0x32	; 50
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	a0 e0       	ldi	r26, 0x00	; 0
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	80 93 00 01 	sts	0x0100, r24
 420:	90 93 01 01 	sts	0x0101, r25
 424:	a0 93 02 01 	sts	0x0102, r26
 428:	b0 93 03 01 	sts	0x0103, r27
	tasksPeriodCntDown = tasksPeriodGCD;
 42c:	80 93 06 01 	sts	0x0106, r24
 430:	90 93 07 01 	sts	0x0107, r25
 434:	a0 93 08 01 	sts	0x0108, r26
 438:	b0 93 09 01 	sts	0x0109, r27
	++i;


	TimerSet(50); // value set should be GCD of all tasks
	TimerOn();
 43c:	fc de       	rcall	.-520    	; 0x236 <TimerOn>
	
    /* Replace with your application code */
    while (1) 
    {
    }
 43e:	ff cf       	rjmp	.-2      	; 0x43e <main+0x86>

00000440 <_exit>:
 440:	f8 94       	cli

00000442 <__stop_program>:
 442:	ff cf       	rjmp	.-2      	; 0x442 <__stop_program>
